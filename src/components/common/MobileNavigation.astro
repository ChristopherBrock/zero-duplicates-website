---
// File: components/common/MobileNavigation.astro
import { getLocaleFromUrl } from '../../i18n/ui';
import { translations } from '../../i18n/translations';
import Button from './Button.astro';
import { appLinks } from '../../utils/constants';

const currentLang = getLocaleFromUrl(Astro.url);
const t = translations[currentLang];

const navigationItems = [
  { href: `/${currentLang}#features`, label: t.nav.features },
  { href: `/${currentLang}#faq`, label: t.nav.faq },
  { href: "/privacy", label: t.footer.privacy },
  { href: "/terms", label: t.footer.terms },
  { href: "/imprint", label: t.footer.imprint },
];
---

<div
  id="mobile-menu"
  class="hidden fixed inset-0 z-50 bg-background-elevated/95 backdrop-blur-sm"
  aria-hidden="true"
>
  <div class="container-width h-full">
    <div class="flex flex-col h-full py-6">
      <!-- Close button -->
      <button
        id="close-menu"
        class="self-end p-2 text-text-secondary hover:text-swift-blue transition-colors"
        aria-label="Close menu"
      >
        <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <!-- Navigation items -->
      <nav class="flex-grow flex items-center">
        <ul class="w-full space-y-6">
          {navigationItems.map(item => (
            <li class="text-center">
              <a
                href={item.href}
                class="text-xl font-medium text-text-secondary hover:text-swift-blue transition-colors"
                aria-label={item.label}
              >
                {item.label}
              </a>
            </li>
          ))}
          <li class="text-center pt-6">
            <Button
              href={appLinks.appStore}
              variant="primary"
              size="lg"
              class="w-full max-w-xs bg-swift-blue hover:bg-swift-blue/90"
              target="_blank"
              rel="noopener noreferrer"
            >
              {t.nav.download}
            </Button>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</div>

<script>
  const mobileMenu = document.getElementById('mobile-menu');
  const closeButton = document.getElementById('close-menu');
  const menuButton = document.getElementById('menu-button');

  function toggleMenu() {
    const isHidden = mobileMenu?.classList.contains('hidden');
    
    if (isHidden) {
      mobileMenu?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    } else {
      mobileMenu?.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }

  menuButton?.addEventListener('click', toggleMenu);
  closeButton?.addEventListener('click', toggleMenu);

  // Close menu when clicking on a link
  mobileMenu?.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', toggleMenu);
  });

  // Close menu on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !mobileMenu?.classList.contains('hidden')) {
      toggleMenu();
    }
  });
</script>