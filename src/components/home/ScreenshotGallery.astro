---
// File: components/home/ScreenshotGallery.astro
const screenshots = [
    {
        webpSrc: "/images/screenshots/screenshot-1.webp",
        alt: "Scan for duplicates",
    },
    {
        webpSrc: "/images/screenshots/screenshot-2.webp",
        alt: "Select duplicates",
    },
    {
        webpSrc: "/images/screenshots/screenshot-3.webp",
        alt: "Delete duplicates",
    },
];
---

<div class="mt-16">
    <div class="relative overflow-hidden rounded-2xl shadow-2xl bg-background-elevated border border-white/10">
      <div 
        class="screenshot-carousel flex transition-transform duration-500 ease-out touch-pan-y"
        id="carousel">
            {/* Last image clone */}
            <div class="w-full shrink-0">
                <img
                    src={screenshots[screenshots.length - 1].webpSrc}
                    alt={screenshots[screenshots.length - 1].alt}
                    class="w-full h-full object-contain bg-background-elevated aspect-[16/10]"
                    loading="lazy"
                />
            </div>
            
            {screenshots.map((screenshot) => (
                <div class="w-full shrink-0">
                    <img
                        src={screenshot.webpSrc}
                        alt={screenshot.alt}
                        class="w-full h-full object-contain bg-background-elevated aspect-[16/10]"
                        loading="lazy"
                    />
                </div>
            ))}
            
            {/* First image clone */}
            <div class="w-full shrink-0">
                <img
                    src={screenshots[0].webpSrc}
                    alt={screenshots[0].alt}
                    class="w-full h-full object-contain bg-background-elevated aspect-[16/10]"
                    loading="lazy"
                />
            </div>
        </div>
        
        <button
            class="absolute left-6 top-1/2 -translate-y-1/2 bg-black/20 hover:bg-black/30 rounded-full p-3 transition backdrop-blur-sm group hidden md:block"
            id="prevButton"
            aria-label="Previous screenshot"
        >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="white" class="w-6 h-6 group-hover:scale-110 transition">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5l-7.5-7.5 7.5-7.5" />
            </svg>
        </button>
        <button
            class="absolute right-6 top-1/2 -translate-y-1/2 bg-black/20 hover:bg-black/30 rounded-full p-3 transition backdrop-blur-sm group hidden md:block"
            id="nextButton"
            aria-label="Next screenshot"
        >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="white" class="w-6 h-6 group-hover:scale-110 transition">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
            </svg>
        </button>
    </div>
</div>

<script>
class ScreenshotGallery {
  private currentIndex: number;
  private carousel: HTMLElement | null;
  private prevButton: HTMLElement | null;
  private nextButton: HTMLElement | null;
  private totalSlides: number;
  private autoplayInterval: number | null;
  private readonly autoplayDelay: number;
  private isTransitioning: boolean;
  private touchStartX: number;
  private touchEndX: number;
  private readonly swipeThreshold: number;

  constructor() {
    this.currentIndex = 0;
    this.carousel = document.querySelector('.screenshot-carousel');
    this.prevButton = document.querySelector('#prevButton');
    this.nextButton = document.querySelector('#nextButton');
    this.totalSlides = 3;
    this.autoplayInterval = null;
    this.autoplayDelay = 5000;
    this.isTransitioning = false;
    this.touchStartX = 0;
    this.touchEndX = 0;
    this.swipeThreshold = 50;
    this.init();
  }

  private init(): void {
    this.updateCarousel(false);
    this.initializeButtons();
    this.initializeTouchEvents();
    this.carousel?.addEventListener('transitionend', () => this.handleTransitionEnd());
    this.startAutoplay();

    const carouselParent = this.carousel?.parentElement;
    if (carouselParent) {
      carouselParent.addEventListener('mouseenter', () => this.stopAutoplay());
      carouselParent.addEventListener('mouseleave', () => this.startAutoplay());
      carouselParent.addEventListener('touchstart', () => this.stopAutoplay(), { passive: true });
      carouselParent.addEventListener('touchend', () => this.startAutoplay());
    }
  }

  private initializeButtons(): void {
    this.prevButton?.addEventListener('click', () => this.prev());
    this.nextButton?.addEventListener('click', () => this.next());
  }

  private initializeTouchEvents(): void {
    if (!this.carousel) return;

    this.carousel.addEventListener('touchstart', (e: TouchEvent) => {
      this.touchStartX = e.touches[0].clientX;
    }, { passive: true });

    this.carousel.addEventListener('touchmove', (e: TouchEvent) => {
      if (this.isTransitioning) return;
      
      const currentTouch = e.touches[0].clientX;
      const diff = this.touchStartX - currentTouch;
      
      // Prevent vertical scrolling when swiping horizontally
      if (Math.abs(diff) > 10) {
        e.preventDefault();
      }
    }, { passive: false });

    this.carousel.addEventListener('touchend', (e: TouchEvent) => {
      this.touchEndX = e.changedTouches[0].clientX;
      this.handleSwipe();
    }, { passive: true });
  }

  private handleSwipe(): void {
    const swipeDistance = this.touchStartX - this.touchEndX;

    if (Math.abs(swipeDistance) >= this.swipeThreshold) {
      if (swipeDistance > 0) {
        // Swipe left - go next
        this.next();
      } else {
        // Swipe right - go prev
        this.prev();
      }
    }
  }

  private handleTransitionEnd(): void {
        if (!this.carousel || this.isTransitioning) return;
    
        // When we reach the cloned first slide (after the last original)
        if (this.currentIndex >= this.totalSlides) {
          this.isTransitioning = true;
          this.carousel.style.transition = 'none';
          this.currentIndex = 0;
          this.updateCarousel(false);
          
          // Force browser reflow
          this.carousel.offsetHeight;
          
          requestAnimationFrame(() => {
            this.carousel!.style.transition = 'transform 500ms ease-out';
            this.isTransitioning = false;
          });
        }
        // When we reach the cloned last slide (before the first original)
        else if (this.currentIndex < 0) {
          this.isTransitioning = true;
          this.carousel.style.transition = 'none';
          this.currentIndex = this.totalSlides - 1;
          this.updateCarousel(false);
          
          // Force browser reflow
          this.carousel.offsetHeight;
          
          requestAnimationFrame(() => {
            this.carousel!.style.transition = 'transform 500ms ease-out';
            this.isTransitioning = false;
          });
        }
      }
    
      private updateCarousel(withTransition: boolean = true): void {
        if (!this.carousel) return;
    
        if (!withTransition) {
          this.carousel.style.transition = 'none';
        } else {
          this.carousel.style.transition = 'transform 500ms ease-out';
        }
    
        // Add 1 to account for the cloned slide at the beginning
        const offset = (this.currentIndex + 1) * -100;
        this.carousel.style.transform = `translateX(${offset}%)`;
      }
    
      private next(): void {
        if (this.isTransitioning) return;
        this.currentIndex++;
        this.updateCarousel();
      }
    
      private prev(): void {
        if (this.isTransitioning) return;
        this.currentIndex--;
        this.updateCarousel();
      }
    
      private startAutoplay(): void {
        if (this.autoplayInterval) return;
        // Always move forward in autoplay
        this.autoplayInterval = window.setInterval(() => this.next(), this.autoplayDelay);
      }
    
      private stopAutoplay(): void {
        if (!this.autoplayInterval) return;
        window.clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
  new ScreenshotGallery();
});
</script>
